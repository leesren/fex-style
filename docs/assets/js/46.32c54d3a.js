(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{222:function(r,t,e){"use strict";e.r(t);var o=e(0),n=Object(o.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"错误监控"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#错误监控","aria-hidden":"true"}},[r._v("#")]),r._v(" 错误监控")]),r._v(" "),e("p",[r._v("在 《"),e("a",{attrs:{href:"https://github.com/joeyguo/blog/issues/13",target:"_blank",rel:"noopener noreferrer"}},[r._v("脚本错误量极致优化-监控上报与 Script error"),e("OutboundLink")],1),r._v("》 中，主要提到了 js 脚本错误上报的方式，并讲解了如何使用 crossorigin 来解决 Script error 报错信息的方案，于是我们就可以查看到脚本报错信息了。而此时可能会遇到另一个问题：”JS 代码压缩后，定位具体出错代码困难！“。本篇 《"),e("a",{attrs:{href:"https://github.com/joeyguo/blog/issues/14",target:"_blank",rel:"noopener noreferrer"}},[r._v("脚本错误量极致优化-让脚本错误一目了然"),e("OutboundLink")],1),r._v("》 将结合示例，通过多种解决方案逐一分析，让脚本错误 一目了然。")]),r._v(" "),e("p",[e("a",{attrs:{href:"http://www.alloyteam.com/2017/05/jserr2/",target:"_blank",rel:"noopener noreferrer"}},[r._v("详情"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);